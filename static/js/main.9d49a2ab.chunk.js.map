{"version":3,"sources":["GraphNode/GraphEdgePicker.tsx","GraphNode/GraphNodeView.tsx","Graph/GraphView.tsx","LinkedList.ts","App.tsx","index.tsx","GraphNode/GraphNode.module.css"],"names":["GraphEdgePicker","graph","ofNode","onClose","onSelect","className","styles","screenCover","onClick","edgePicker","addButton","map","node","item","nodeEdge","data","observer","useState","isPickerOpen","setIsPickerOpen","graphNodeContainer","graphNode","nodeData","edges","edge","i","action","remove","add","GraphView","n","ListNode","prev","next","ObservableLinkedList","atom","createAtom","this","reportObserved","reportChanged","removedNode","func","firstNode","lastNode","newNode","mutNode","currentNode","arr","forEach","push","makeNode","nodes","App","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"4LAwCeA,EA7BS,SAAC,GAAD,IACpBC,EADoB,EACpBA,MACAC,EAFoB,EAEpBA,OACAC,EAHoB,EAGpBA,QACAC,EAJoB,EAIpBA,SAJoB,OAMpB,gCACI,qBAAKC,UAAWC,IAAOC,YAAaC,QAASL,IAC7C,sBAAKE,UAAWC,IAAOG,WAAvB,UACI,qBAAKJ,UAAWC,IAAOI,UAAvB,eACCT,EAAMU,KACH,SAAAC,GAAI,OACAA,EAAKC,OAASX,GACV,qBACIG,UAAWC,IAAOQ,SAClBN,QAAS,WACLJ,EAASQ,EAAKC,MACdV,KAJR,SAQKS,EAAKC,KAAKE,MAFNH,EAAKC,KAAKE,gBCkB5BC,eArCO,SAAC,GAAyC,IAAvCJ,EAAsC,EAAtCA,KAAMX,EAAgC,EAAhCA,MAAgC,EACnBgB,oBAAS,GADU,mBACpDC,EADoD,KACtCC,EADsC,KAE3D,OACI,sBAAKd,UAAWC,IAAOc,mBAAvB,UACI,sBAAKf,UAAWC,IAAOe,UAAvB,UACI,qBAAKhB,UAAWC,IAAOgB,SAAvB,SACI,+BAAOV,EAAKG,SAEfH,EAAKW,MAAMZ,KAAI,SAACa,EAAMC,GAAP,OACZ,qBACIpB,UAAWC,IAAOQ,SAElBN,QAASkB,aAAO,kBAAMd,EAAKW,MAAMI,OAAOH,MAH5C,SAKKA,EAAKX,KAAKE,MAHNU,EAAID,EAAKX,KAAKE,YAO9BG,EACG,cAAC,EAAD,CACIjB,MAAOA,EACPC,OAAQU,EACRT,QAAS,kBAAMgB,GAAgB,IAC/Bf,SAAU,SAAAoB,GAAI,OAAIZ,EAAKW,MAAMK,IAAIJ,MAGrC,qBACInB,UAAWC,IAAOI,UAClBF,QAAS,kBAAMW,GAAgB,IAFnC,qBCvBDU,EARG,SAAC,GAAD,IAAG5B,EAAH,EAAGA,MAAH,OACd,8BACKA,EAAMU,KAAI,SAAAmB,GAAC,OACR,cAAC,EAAD,CAAelB,KAAMkB,EAAEjB,KAAMZ,MAAOA,GAAY6B,EAAEjB,KAAKE,Y,4CCD7DgB,EAIF,WAAqBlB,GAAU,yBAAVA,OAAS,KAH9BmB,UAG8B,OAF9BC,UAE8B,GAwD5BC,E,kDAGF,aAAe,IAAD,8BACV,gBAHaC,UAEH,EAEV,EAAKA,KAAOC,YAAW,qBAFb,E,yCAKd,WAEI,OADAC,KAAKF,KAAKG,iBACH,gE,kBAGX,WAEI,OADAD,KAAKF,KAAKG,iBACH,+D,iBAGX,SAAIzB,GACAwB,KAAKF,KAAKI,gBACV,2DAAU1B,K,oBAGd,SAAO2B,GACHH,KAAKF,KAAKI,gBACV,8DAAaC,K,qBAGjB,SAAQC,GACJJ,KAAKF,KAAKG,iBACV,+DAAcG,K,iBAGlB,SACIA,GAGA,OADAJ,KAAKF,KAAKG,iBACH,2DAAUG,O,oDAzFbC,e,OACAC,c,2CAER,WACI,OAAON,KAAKK,Y,kBAGhB,WACI,OAAOL,KAAKM,W,iBAGhB,SAAI9B,GACA,IAAM+B,EAAU,IAAIb,EAASlB,GACxBwB,KAAKK,UAGCL,KAAKM,WACZN,KAAKM,SAASV,KAAOW,EACrBA,EAAQZ,KAAOK,KAAKM,SACpBN,KAAKM,SAAWC,IALhBP,KAAKK,UAAYE,EACjBP,KAAKM,SAAWC,K,oBAQxB,SAAOJ,GACH,IAAMK,EAAUL,EACVR,EAAOa,EAAQb,KACfC,EAAOY,EAAQZ,KACjBI,KAAKM,WAAaH,IAAaH,KAAKM,SAAWX,GAC/CK,KAAKK,YAAcF,IAAaH,KAAKK,UAAYT,GACjDD,IAAMA,EAAKC,KAAOA,GAClBA,IAAMA,EAAKD,KAAOA,K,qBAG1B,SAAQS,GAGJ,IAFA,IAAIK,EAAcT,KAAKK,UACnBjB,EAAI,EACDqB,GACHL,EAAKK,EAAarB,GAClBA,GAAK,EACLqB,EAAcA,EAAYb,O,iBAIlC,SACIQ,GAEA,IAAMM,EAAiB,GAEvB,OADAV,KAAKW,SAAQ,SAAClB,EAAGL,GAAJ,OAAUsB,EAAIE,KAAKR,EAAKX,EAAGL,OACjCsB,M,MC3DT9C,EAAe,IAAIiC,EACnBgB,EAAW,SAACnC,GAAD,MAA8B,CAC3CA,OACAQ,MAAO,IAAIW,IAGTiB,EAAQ,CAACD,EAAS,KAAMA,EAAS,KAAMA,EAAS,KAAMA,EAAS,MAErEC,EAAM,GAAG5B,MAAMK,IAAIuB,EAAM,IACzBA,EAAM,GAAG5B,MAAMK,IAAIuB,EAAM,IACzBA,EAAM,GAAG5B,MAAMK,IAAIuB,EAAM,IACzBA,EAAM,GAAG5B,MAAMK,IAAIuB,EAAM,IACzBA,EAAM,GAAG5B,MAAMK,IAAIuB,EAAM,IACzBA,EAAMH,SAAQ,SAAAlB,GAAC,OAAI7B,EAAM2B,IAAIE,MAE7B,IAMesB,EANH,kBACR,qBAAK/C,UAAU,MAAf,SACI,cAAC,EAAD,CAAWJ,MAAOA,OClB1BoD,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,U,kBCP5BC,EAAOC,QAAU,CAAC,UAAY,6BAA6B,WAAa,8BAA8B,mBAAqB,sCAAsC,UAAY,6BAA6B,YAAc,+BAA+B,SAAW,4BAA4B,SAAW,+B","file":"static/js/main.9d49a2ab.chunk.js","sourcesContent":["import Graph from 'Graph/Graph'\nimport GraphNode from './GraphNode'\nimport styles from './GraphNode.module.css'\n\ntype Props = {\n    graph: Graph\n    ofNode: GraphNode\n    onClose: () => void\n    onSelect: (selected: GraphNode) => void\n}\n\nconst GraphEdgePicker = ({\n    graph,\n    ofNode,\n    onClose,\n    onSelect,\n}: Props): JSX.Element => (\n    <div>\n        <div className={styles.screenCover} onClick={onClose} />\n        <div className={styles.edgePicker}>\n            <div className={styles.addButton}>+</div>\n            {graph.map(\n                node =>\n                    node.item !== ofNode && (\n                        <div\n                            className={styles.nodeEdge}\n                            onClick={() => {\n                                onSelect(node.item)\n                                onClose()\n                            }}\n                            key={node.item.data}\n                        >\n                            {node.item.data}\n                        </div>\n                    )\n            )}\n        </div>\n    </div>\n)\n\nexport default GraphEdgePicker\n","import Graph from 'Graph/Graph'\nimport { action } from 'mobx'\nimport { observer } from 'mobx-react-lite'\nimport { useState } from 'react'\nimport GraphEdgePicker from './GraphEdgePicker'\nimport GraphNode from './GraphNode'\nimport styles from './GraphNode.module.css'\ntype Props = {\n    graph: Graph\n    node: GraphNode\n}\nconst GraphNodeView = ({ node, graph }: Props): JSX.Element => {\n    const [isPickerOpen, setIsPickerOpen] = useState(false)\n    return (\n        <div className={styles.graphNodeContainer}>\n            <div className={styles.graphNode}>\n                <div className={styles.nodeData}>\n                    <span>{node.data}</span>\n                </div>\n                {node.edges.map((edge, i) => (\n                    <div\n                        className={styles.nodeEdge}\n                        key={i + edge.item.data}\n                        onClick={action(() => node.edges.remove(edge))}\n                    >\n                        {edge.item.data}\n                    </div>\n                ))}\n            </div>\n            {isPickerOpen ? (\n                <GraphEdgePicker\n                    graph={graph}\n                    ofNode={node}\n                    onClose={() => setIsPickerOpen(false)}\n                    onSelect={edge => node.edges.add(edge)}\n                />\n            ) : (\n                <div\n                    className={styles.addButton}\n                    onClick={() => setIsPickerOpen(true)}\n                >\n                    +\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport default observer(GraphNodeView)\n","import Graph from './Graph'\nimport GraphNodeView from 'GraphNode/GraphNodeView'\ntype Props = {\n    graph: Graph\n}\n\nconst GraphView = ({ graph }: Props): JSX.Element => (\n    <div>\n        {graph.map(n => (\n            <GraphNodeView node={n.item} graph={graph} key={n.item.data} />\n        ))}\n    </div>\n)\n\nexport default GraphView\n","import { IAtom, createAtom } from 'mobx'\n\ninterface IListNode<T> {\n    readonly item: T\n    readonly prev?: IListNode<T>\n    readonly next?: IListNode<T>\n}\n\nclass ListNode<T> implements IListNode<T> {\n    prev?: ListNode<T>\n    next?: ListNode<T>\n\n    constructor(readonly item: T) {}\n}\n\nclass LinkedList<T> {\n    private firstNode?: ListNode<T>\n    private lastNode?: ListNode<T>\n\n    first(): IListNode<T> | undefined {\n        return this.firstNode\n    }\n\n    last(): IListNode<T> | undefined {\n        return this.lastNode\n    }\n\n    add(item: T): void {\n        const newNode = new ListNode(item)\n        if (!this.firstNode) {\n            this.firstNode = newNode\n            this.lastNode = newNode\n        } else if (this.lastNode) {\n            this.lastNode.next = newNode\n            newNode.prev = this.lastNode\n            this.lastNode = newNode\n        }\n    }\n\n    remove(removedNode: IListNode<T>): void {\n        const mutNode = removedNode as ListNode<T>\n        const prev = mutNode.prev\n        const next = mutNode.next\n        if (this.lastNode === removedNode) this.lastNode = prev\n        if (this.firstNode === removedNode) this.firstNode = next\n        if (prev) prev.next = next\n        if (next) next.prev = prev\n    }\n\n    forEach(func: (node: IListNode<T>, index: number) => void): void {\n        let currentNode = this.firstNode\n        let i = 0\n        while (currentNode) {\n            func(currentNode, i)\n            i += 1\n            currentNode = currentNode.next\n        }\n    }\n\n    map<TResult>(\n        func: (node: IListNode<T>, index: number) => TResult\n    ): TResult[] {\n        const arr: TResult[] = []\n        this.forEach((n, i) => arr.push(func(n, i)))\n        return arr\n    }\n}\n\nclass ObservableLinkedList<T> extends LinkedList<T> {\n    private readonly atom: IAtom\n\n    constructor() {\n        super()\n        this.atom = createAtom('ObservableSublist')\n    }\n\n    first(): IListNode<T> | undefined {\n        this.atom.reportObserved()\n        return super.first()\n    }\n\n    last(): IListNode<T> | undefined {\n        this.atom.reportObserved()\n        return super.last()\n    }\n\n    add(item: T): void {\n        this.atom.reportChanged()\n        super.add(item)\n    }\n\n    remove(removedNode: IListNode<T>): void {\n        this.atom.reportChanged()\n        super.remove(removedNode)\n    }\n\n    forEach(func: (node: IListNode<T>, index: number) => void): void {\n        this.atom.reportObserved()\n        super.forEach(func)\n    }\n\n    map<TResult>(\n        func: (node: IListNode<T>, index: number) => TResult\n    ): TResult[] {\n        this.atom.reportObserved()\n        return super.map(func)\n    }\n}\nexport { LinkedList, ObservableLinkedList }\nexport type { IListNode }\n","import Graph from 'Graph/Graph'\nimport GraphView from 'Graph/GraphView'\nimport GraphNode from 'GraphNode/GraphNode'\nimport { ObservableLinkedList } from 'LinkedList'\n\nconst graph: Graph = new ObservableLinkedList()\nconst makeNode = (data: string): GraphNode => ({\n    data,\n    edges: new ObservableLinkedList(),\n})\n\nconst nodes = [makeNode('a'), makeNode('b'), makeNode('c'), makeNode('d')]\n\nnodes[0].edges.add(nodes[1])\nnodes[0].edges.add(nodes[2])\nnodes[1].edges.add(nodes[2])\nnodes[3].edges.add(nodes[0])\nnodes[3].edges.add(nodes[1])\nnodes.forEach(n => graph.add(n))\n\nconst App = (): JSX.Element => (\n    <div className=\"App\">\n        <GraphView graph={graph} />\n    </div>\n)\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"graphNode\":\"GraphNode_graphNode__1si0g\",\"edgePicker\":\"GraphNode_edgePicker__1EB6k\",\"graphNodeContainer\":\"GraphNode_graphNodeContainer__1Zx0W\",\"addButton\":\"GraphNode_addButton__3YoQI\",\"screenCover\":\"GraphNode_screenCover__QdJmd\",\"nodeEdge\":\"GraphNode_nodeEdge__1etGp\",\"nodeData\":\"GraphNode_nodeData__1sLRo\"};"],"sourceRoot":""}